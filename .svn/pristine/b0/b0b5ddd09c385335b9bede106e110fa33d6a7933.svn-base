package com.icloud.api.zltdd;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.icloud.annotation.AuthIgnore;
import com.icloud.annotation.LoginUser;
import com.icloud.api.vo.UserAccount;
import com.icloud.common.R;
import com.icloud.common.util.StringUtil;
import com.icloud.common.validator.ValidatorUtils;
import com.icloud.modules.wx.entity.WxUser;
import com.icloud.modules.zltdd.entity.ZltddRecommend;
import com.icloud.modules.zltdd.entity.ZltddShop;
import com.icloud.modules.zltdd.service.ZltddRecommendService;
import com.icloud.modules.zltdd.service.ZltddShopService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Api("首页相关接口")
@RestController
@RequestMapping("/api/index")
public class IndexController {

    @Autowired
    private ZltddRecommendService zltddRecommendService;
    @Autowired
    private ZltddShopService zltddShopService;
    /**
     * 用户信息接口
     * @return
     */
    @ApiOperation(value="用户信息接口", notes="")
    @RequestMapping(value = "/userinfo",method = {RequestMethod.GET})
    @ResponseBody
    public R userinfo(@LoginUser WxUser user) {
       List<ZltddRecommend> list = zltddRecommendService.list(new QueryWrapper<ZltddRecommend>().eq("user_id",user.getId()));
       if(list!=null && list.size()>0){
           user.setIsbind("1");//已经成为推客
       }else {
           user.setIsbind("0");//还未成为推客
       }
       return R.ok().put("user",user);
    }

    /**
     * 我的名片
     * @return
     */
    @ApiOperation(value="我的名片", notes="")
    @RequestMapping(value = "/myCard",method = {RequestMethod.GET})
    @ResponseBody
    public R myCard(@LoginUser WxUser user) {

        return R.ok().put("user",user);
    }

    /**
     * 我的团队
     * @return
     */
    @ApiOperation(value="我的团队", notes="")
    @RequestMapping(value = "/myTeam",method = {RequestMethod.GET})
    @ResponseBody
    public R myTeam(@LoginUser WxUser user) {
        Map<String, Object> query = new HashMap<>();
        query.put("userId",user.getId());
        List<ZltddRecommend> list = zltddRecommendService.queryMixList(query);
        if(list!=null && list.size()>0){
            user.setIsbind("1");//已经成为推客
        }else {
            user.setIsbind("0");//还未成为推客
        }
        return R.ok().put("user",user);
    }

    /**
     * 我的中奖记录
     * @return
     */
    @ApiOperation(value="我的中奖记录", notes="")
    @RequestMapping(value = "/myAarwordsList",method = {RequestMethod.GET})
    @ResponseBody
    public R myAarwordsList(@LoginUser WxUser user) {
        return R.ok().put("user",user);
    }

    /**
     * 领取奖品
     * @return
     */
    @ApiOperation(value="领取奖品", notes="")
    @RequestMapping(value = "/getAwards",method = {RequestMethod.GET})
    @ResponseBody
    public R getAwards(@LoginUser WxUser user,@RequestParam Long id) {
        return R.ok().put("user",user);
    }
    /**
     * 绑定成功天使用户
     * @return
     */
    @ApiOperation(value="绑定成功天使用户", notes="")
    @RequestMapping(value = "/bindRecomend",method = {RequestMethod.GET})
    @ResponseBody
    public R bindRecomend(@LoginUser WxUser user,@RequestBody UserAccount userAccount) {
        ValidatorUtils.validateEntityForFront(userAccount);
       List<ZltddShop> list = zltddShopService.list(new QueryWrapper<ZltddShop>()
               .eq("contact_phone",userAccount.getContactPhone())
               .eq("licenese",userAccount.getLicenese()));
       if(list==null || list.size()==0){
           return R.error(102,"账号不存在");
       }
        ZltddShop shop = list.get(0);
       if(StringUtil.checkStr(shop.getOpenid())){
           return R.error(103,"账号已被绑定");
       }
        zltddShopService.createTopRecommend(shop,user);
       return R.ok();
    }
}
